AMD HSA Code Object
  Version 1:0
HSAIL 
  Version 1:0
  Profile 1  Machine model: 1  Default float rounding: 2
ISA
  Vendor AMD  Arch AMDGPU  Version 7:0:0
Producer options
  '-hsa_call_convention=0 -O'

Segments (total 1):
  Segment (0)
    Type: 1610612739     Flags: 0x00000006
    Image Size: 2576     Memory Size: 2576     Align: 256     VAddr: 0

Data Sections (total 1):
  Section .hsatext (Index 1)
    Type: 1     Flags: 0x00c00007
    Size:  2576     Address: 0     Align: 256

Relocation Sections (total 0):

Symbols (total 1):
  Symbol &__OpenCL_vector_copy_kernel (Index 0):
    Section: .hsatext     Section Offset: 0
    VAddr: 0     Size: 2576     Alignment: 256
    Kind: KERNEL     Linkage: PROGRAM     Definition: TRUE

AMD Kernel Code for &__OpenCL_vector_copy_kernel: 
  amd_kernel_code_version_major                                = 1
  amd_kernel_code_version_minor                                = 1
  amd_machine_kind                                             = AMDGPU
  amd_machine_version_major                                    = 0
  amd_machine_version_minor                                    = 0
  amd_machine_version_stepping                                 = 0
  kernel_code_entry_byte_offset                                = 256
  max_scratch_backing_memory_byte_size                         = 0
  COMPUTE_PGM_RSRC1 (0xac004300):
    granulated_workitem_vgpr_count                             = 3
    granulated_wavefront_sgpr_count                            = 1
    priority                                                   = 0
    float_round_mode_32                                        = NEAREST_EVEN
    float_round_mode_16_64                                     = NEAREST_EVEN
    float_denorm_mode_32                                       = FLUSH_SOURCE_OUTPUT
    float_denorm_mode_16_64                                    = FLUSH_NONE
    enable_dx10_clamp                                          = TRUE
    enable_ieee_mode                                           = TRUE
  COMPUTE_PGM_RSRC2 (0x90000000):
    user_sgpr_count                                            = 8
    enable_sgpr_workgroup_id_x                                 = TRUE
    enable_vgpr_workitem_id                                    = X
    granulated_lds_size                                        = 0
  KERNEL_CODE_PROPERTIES (0xa000b000):
    enable_sgpr_private_segment_buffer                         = TRUE
    enable_sgpr_dispatch_ptr                                   = TRUE
    enable_sgpr_kernarg_segment_ptr                            = TRUE
    private_element_size                                       = DWORD (4 bytes)
    is_ptr64                                                   = TRUE
  kernarg_segment_byte_size                                    = 50
  wavefront_sgpr_count                                         = c
  workitem_vgpr_count                                          = 10
  kernarg_segment_alignment                                    = 4
  group_segment_alignment                                      = 4
  private_segment_alignment                                    = 4
  wavefront_size                                               = 6

Disassembly for &__OpenCL_vector_copy_kernel: 
  asic(CI)
  type(CS)

  s_load_dword  s0, s[4:5], 0x01                        // 000000000000: C0000501
  s_waitcnt     lgkmcnt(0)                              // 000000000004: BF8C007F
  s_bfe_u32     s0, s0, 0x00100000                      // 000000000008: 9380FF00 00100000
  s_mul_i32     s0, s0, s8                              // 000000000010: 93000800
  v_add_i32     v0, s[2:3], s0, v0                      // 000000000014: D24A0200 00020000
  s_load_dwordx2  s[0:1], s[6:7], 0x0c                  // 00000000001C: C040070C
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  v_mov_b32     v1, s0                                  // 000000000024: 7E020200
  v_readfirstlane_b32  s2, v1                           // 000000000028: 7E040501
  v_mov_b32     v1, s1                                  // 00000000002C: 7E020201
  v_readfirstlane_b32  s3, v1                           // 000000000030: 7E060501
  s_load_dword  s2, s[2:3], 0x00                        // 000000000034: C0010300
  v_mov_b32     v1, 0x000003e8                          // 000000000038: 7E0202FF 000003E8
  s_waitcnt     lgkmcnt(0)                              // 000000000040: BF8C007F
  v_mul_lo_u32  v1, s2, v1                              // 000000000044: D2D20001 00020202
  v_cmp_lt_i32  s[2:3], v1, 1                           // 00000000004C: D1020002 00010301
  s_mov_b64     s[4:5], exec                            // 000000000054: BE84047E
  s_andn2_b64   exec, s[4:5], s[2:3]                    // 000000000058: 8AFE0204
  s_cbranch_execz  label_0243                           // 00000000005C: BF88022B
  s_load_dwordx2  s[2:3], s[6:7], 0x0e                  // 000000000060: C041070E
  s_load_dwordx2  s[6:7], s[6:7], 0x00                  // 000000000064: C0430700
  s_waitcnt     lgkmcnt(0)                              // 000000000068: BF8C007F
  v_add_i32     v0, s[8:9], v0, s6                      // 00000000006C: D24A0800 00000D00
  v_mov_b32     v1, s7                                  // 000000000074: 7E020207
  v_addc_u32    v1, vcc, 0, v1, s[8:9]                  // 000000000078: D2506A01 00220280
  v_lshl_b64    v[0:1], v[0:1], 32                      // 000000000080: D2C20000 00014100
  v_ashr_i64    v[0:1], v[0:1], 32                      // 000000000088: D2C60000 00014100
  v_lshl_b64    v[0:1], v[0:1], 2                       // 000000000090: D2C20000 00010500
  v_add_i32     v2, s[6:7], s2, v0                      // 000000000098: D24A0602 00020002
  v_mov_b32     v3, s3                                  // 0000000000A0: 7E060203
  v_addc_u32    v3, vcc, v3, v1, s[6:7]                 // 0000000000A4: D2506A03 001A0303
  v_add_i32     v0, s[2:3], s0, v0                      // 0000000000AC: D24A0200 00020000
  v_mov_b32     v4, s1                                  // 0000000000B4: 7E080201
  v_addc_u32    v1, vcc, v4, v1, s[2:3]                 // 0000000000B8: D2506A01 000A0304
  v_mov_b32     v4, s0                                  // 0000000000C0: 7E080200
  v_mov_b32     v5, s1                                  // 0000000000C4: 7E0A0201
  flat_load_dword  v4, v[4:5]                           // 0000000000C8: DC300000 04000004
  s_movk_i32    s0, 0x03e8                              // 0000000000D0: B00003E8
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 0000000000D4: BF8C0070
  v_mul_lo_u32  v4, v4, s0                              // 0000000000D8: D2D20004 00000104
  s_mov_b64     s[0:1], exec                            // 0000000000E0: BE80047E
  v_mov_b32     v5, 0                                   // 0000000000E4: 7E0A0280
label_003A:
  v_bfe_u32     v6, v1, 16, 16                          // 0000000000E8: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 0000000000F0: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 0000000000F8: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 000000000100: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 000000000108: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 000000000110: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 000000000118: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 000000000120: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 000000000128: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 000000000130: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 000000000138: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 000000000140: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 000000000148: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 000000000150: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 000000000158: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 000000000160: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 000000000168: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 000000000170: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 000000000178: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 000000000180: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 000000000188: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 00000000018C: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 000000000194: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 00000000019C: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 0000000001A0: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 0000000001A8: D2940000 041A0002
  v_bfe_u32     v6, v1, 16, 16                          // 0000000001B0: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 0000000001B8: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 0000000001C0: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 0000000001C8: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 0000000001D0: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 0000000001D8: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 0000000001E0: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 0000000001E8: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 0000000001F0: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 0000000001F8: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 000000000200: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 000000000208: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 000000000210: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 000000000218: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 000000000220: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 000000000228: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 000000000230: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 000000000238: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 000000000240: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 000000000248: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 000000000250: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 000000000254: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 00000000025C: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 000000000264: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 000000000268: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 000000000270: D2940000 041A0002
  v_bfe_u32     v6, v1, 16, 16                          // 000000000278: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 000000000280: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 000000000288: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 000000000290: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 000000000298: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 0000000002A0: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 0000000002A8: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 0000000002B0: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 0000000002B8: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 0000000002C0: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 0000000002C8: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 0000000002D0: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 0000000002D8: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 0000000002E0: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 0000000002E8: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 0000000002F0: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 0000000002F8: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 000000000300: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 000000000308: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 000000000310: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 000000000318: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 00000000031C: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 000000000324: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 00000000032C: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 000000000330: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 000000000338: D2940000 041A0002
  v_bfe_u32     v6, v1, 16, 16                          // 000000000340: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 000000000348: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 000000000350: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 000000000358: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 000000000360: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 000000000368: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 000000000370: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 000000000378: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 000000000380: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 000000000388: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 000000000390: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 000000000398: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 0000000003A0: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 0000000003A8: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 0000000003B0: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 0000000003B8: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 0000000003C0: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 0000000003C8: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 0000000003D0: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 0000000003D8: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 0000000003E0: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 0000000003E4: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 0000000003EC: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 0000000003F4: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 0000000003F8: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 000000000400: D2940000 041A0002
  v_bfe_u32     v6, v1, 16, 16                          // 000000000408: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 000000000410: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 000000000418: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 000000000420: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 000000000428: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 000000000430: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 000000000438: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 000000000440: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 000000000448: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 000000000450: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 000000000458: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 000000000460: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 000000000468: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 000000000470: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 000000000478: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 000000000480: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 000000000488: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 000000000490: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 000000000498: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 0000000004A0: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 0000000004A8: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 0000000004AC: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 0000000004B4: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 0000000004BC: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 0000000004C0: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 0000000004C8: D2940000 041A0002
  v_bfe_u32     v6, v1, 16, 16                          // 0000000004D0: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 0000000004D8: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 0000000004E0: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 0000000004E8: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 0000000004F0: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 0000000004F8: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 000000000500: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 000000000508: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 000000000510: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 000000000518: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 000000000520: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 000000000528: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 000000000530: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 000000000538: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 000000000540: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 000000000548: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 000000000550: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 000000000558: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 000000000560: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 000000000568: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 000000000570: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 000000000574: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 00000000057C: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 000000000584: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 000000000588: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 000000000590: D2940000 041A0002
  v_bfe_u32     v6, v1, 16, 16                          // 000000000598: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 0000000005A0: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 0000000005A8: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 0000000005B0: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 0000000005B8: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 0000000005C0: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 0000000005C8: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 0000000005D0: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 0000000005D8: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 0000000005E0: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 0000000005E8: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 0000000005F0: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 0000000005F8: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 000000000600: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 000000000608: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 000000000610: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 000000000618: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 000000000620: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 000000000628: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 000000000630: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 000000000638: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 00000000063C: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 000000000644: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 00000000064C: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 000000000650: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 000000000658: D2940000 041A0002
  v_bfe_u32     v6, v1, 16, 16                          // 000000000660: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 000000000668: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 000000000670: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 000000000678: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 000000000680: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 000000000688: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 000000000690: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 000000000698: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 0000000006A0: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 0000000006A8: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 0000000006B0: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 0000000006B8: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 0000000006C0: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 0000000006C8: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 0000000006D0: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 0000000006D8: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 0000000006E0: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 0000000006E8: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 0000000006F0: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 0000000006F8: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 000000000700: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 000000000704: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 00000000070C: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 000000000714: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 000000000718: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 000000000720: D2940000 041A0002
  v_bfe_u32     v6, v1, 16, 16                          // 000000000728: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 000000000730: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 000000000738: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 000000000740: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 000000000748: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 000000000750: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 000000000758: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 000000000760: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 000000000768: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 000000000770: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 000000000778: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 000000000780: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 000000000788: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 000000000790: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 000000000798: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 0000000007A0: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 0000000007A8: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 0000000007B0: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 0000000007B8: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 0000000007C0: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 0000000007C8: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 0000000007CC: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 0000000007D4: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 0000000007DC: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 0000000007E0: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 0000000007E8: D2940000 041A0002
  v_bfe_u32     v6, v1, 16, 16                          // 0000000007F0: D2900006 02412101
  v_bfe_u32     v7, v1, 16, 16                          // 0000000007F8: D2900007 02412101
  v_bfe_u32     v8, v1, 16, 16                          // 000000000800: D2900008 02412101
  v_bfe_u32     v9, v1, 0, 16                           // 000000000808: D2900009 02410101
  v_bfe_u32     v10, v1, 0, 16                          // 000000000810: D290000A 02410101
  v_bfe_u32     v1, v1, 0, 16                           // 000000000818: D2900001 02410101
  v_bfe_u32     v11, v0, 16, 16                         // 000000000820: D290000B 02412100
  v_bfe_u32     v12, v0, 16, 16                         // 000000000828: D290000C 02412100
  v_bfe_u32     v13, v0, 16, 16                         // 000000000830: D290000D 02412100
  v_bfe_u32     v14, v0, 0, 16                          // 000000000838: D290000E 02410100
  v_bfe_u32     v15, v0, 0, 16                          // 000000000840: D290000F 02410100
  v_bfe_u32     v0, v0, 0, 16                           // 000000000848: D2900000 02410100
  v_cmp_eq_u32  s[2:3], v6, 0                           // 000000000850: D1840002 00010106
  v_cndmask_b32  v6, v7, v8, s[2:3]                     // 000000000858: D2000006 000A1107
  v_cmp_eq_u32  s[2:3], v9, 0                           // 000000000860: D1840002 00010109
  v_cndmask_b32  v1, v10, v1, s[2:3]                    // 000000000868: D2000001 000A030A
  v_cmp_eq_u32  s[2:3], v11, 0                          // 000000000870: D1840002 0001010B
  v_cndmask_b32  v7, v12, v13, s[2:3]                   // 000000000878: D2000007 000A1B0C
  v_cmp_eq_u32  s[2:3], v14, 0                          // 000000000880: D1840002 0001010E
  v_cndmask_b32  v0, v15, v0, s[2:3]                    // 000000000888: D2000000 000A010F
  v_lshlrev_b32  v6, 16, v6                             // 000000000890: 340C0C90
  s_mov_b32     s2, 0x0000ffff                          // 000000000894: BE8203FF 0000FFFF
  v_bfi_b32     v1, s2, v1, v6                          // 00000000089C: D2940001 041A0202
  v_lshlrev_b32  v6, 16, v7                             // 0000000008A4: 340C0E90
  s_mov_b32     s2, 0x0000ffff                          // 0000000008A8: BE8203FF 0000FFFF
  v_bfi_b32     v0, s2, v0, v6                          // 0000000008B0: D2940000 041A0002
  v_add_i32     v5, vcc, 1, v5                          // 0000000008B8: 4A0A0A81
  v_cmp_lt_i32  s[2:3], v5, v4                          // 0000000008BC: D1020002 00020905
  s_and_b64     exec, exec, s[2:3]                      // 0000000008C4: 87FE027E
  s_cbranch_execz  label_0234                           // 0000000008C8: BF880001
  s_branch      label_003A                              // 0000000008CC: BF82FE06
label_0234:
  s_mov_b64     exec, s[0:1]                            // 0000000008D0: BEFE0400
  flat_load_dword  v0, v[0:1]                           // 0000000008D4: DC300000 00000000
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 0000000008DC: BF8C0070
  flat_store_dword  v[2:3], v0                          // 0000000008E0: DC700000 00000002
  v_mov_b32     v0, 0                                   // 0000000008E8: 7E000280
  flat_store_dword  v[2:3], v0                          // 0000000008EC: DC700000 00000002
  v_mov_b32     v0, 0                                   // 0000000008F4: 7E000280
  flat_store_dword  v[2:3], v0                          // 0000000008F8: DC700000 00000002
  v_mov_b32     v0, 0                                   // 000000000900: 7E000280
  flat_store_dword  v[2:3], v0                          // 000000000904: DC700000 00000002
label_0243:
  s_endpgm                                              // 00000000090C: BF810000
end

AMD HSA Code Object End
