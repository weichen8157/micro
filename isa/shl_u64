AMD HSA Code Object
  Version 1:0
HSAIL 
  Version 1:0
  Profile 1  Machine model: 1  Default float rounding: 2
ISA
  Vendor AMD  Arch AMDGPU  Version 7:0:0
Producer options
  '-hsa_call_convention=0 -O'

Segments (total 1):
  Segment (0)
    Type: 1610612739     Flags: 0x00000006
    Image Size: 560     Memory Size: 560     Align: 256     VAddr: 0

Data Sections (total 1):
  Section .hsatext (Index 1)
    Type: 1     Flags: 0x00c00007
    Size:  560     Address: 0     Align: 256

Relocation Sections (total 0):

Symbols (total 1):
  Symbol &__OpenCL_vector_copy_kernel (Index 0):
    Section: .hsatext     Section Offset: 0
    VAddr: 0     Size: 560     Alignment: 256
    Kind: KERNEL     Linkage: PROGRAM     Definition: TRUE

AMD Kernel Code for &__OpenCL_vector_copy_kernel: 
  amd_kernel_code_version_major                                = 1
  amd_kernel_code_version_minor                                = 1
  amd_machine_kind                                             = AMDGPU
  amd_machine_version_major                                    = 0
  amd_machine_version_minor                                    = 0
  amd_machine_version_stepping                                 = 0
  kernel_code_entry_byte_offset                                = 256
  max_scratch_backing_memory_byte_size                         = 0
  COMPUTE_PGM_RSRC1 (0xac004100):
    granulated_workitem_vgpr_count                             = 1
    granulated_wavefront_sgpr_count                            = 1
    priority                                                   = 0
    float_round_mode_32                                        = NEAREST_EVEN
    float_round_mode_16_64                                     = NEAREST_EVEN
    float_denorm_mode_32                                       = FLUSH_SOURCE_OUTPUT
    float_denorm_mode_16_64                                    = FLUSH_NONE
    enable_dx10_clamp                                          = TRUE
    enable_ieee_mode                                           = TRUE
  COMPUTE_PGM_RSRC2 (0x90000000):
    user_sgpr_count                                            = 8
    enable_sgpr_workgroup_id_x                                 = TRUE
    enable_vgpr_workitem_id                                    = X
    granulated_lds_size                                        = 0
  KERNEL_CODE_PROPERTIES (0xa000b000):
    enable_sgpr_private_segment_buffer                         = TRUE
    enable_sgpr_dispatch_ptr                                   = TRUE
    enable_sgpr_kernarg_segment_ptr                            = TRUE
    private_element_size                                       = DWORD (4 bytes)
    is_ptr64                                                   = TRUE
  kernarg_segment_byte_size                                    = 50
  wavefront_sgpr_count                                         = b
  workitem_vgpr_count                                          = 6
  kernarg_segment_alignment                                    = 4
  group_segment_alignment                                      = 4
  private_segment_alignment                                    = 4
  wavefront_size                                               = 6

Disassembly for &__OpenCL_vector_copy_kernel: 
  asic(CI)
  type(CS)

  s_load_dword  s0, s[4:5], 0x01                        // 000000000000: C0000501
  s_waitcnt     lgkmcnt(0)                              // 000000000004: BF8C007F
  s_bfe_u32     s0, s0, 0x00100000                      // 000000000008: 9380FF00 00100000
  s_mul_i32     s0, s0, s8                              // 000000000010: 93000800
  v_add_i32     v0, s[2:3], s0, v0                      // 000000000014: D24A0200 00020000
  s_load_dwordx2  s[0:1], s[6:7], 0x0c                  // 00000000001C: C040070C
  s_waitcnt     lgkmcnt(0)                              // 000000000020: BF8C007F
  v_mov_b32     v1, s0                                  // 000000000024: 7E020200
  v_readfirstlane_b32  s2, v1                           // 000000000028: 7E040501
  v_mov_b32     v1, s1                                  // 00000000002C: 7E020201
  v_readfirstlane_b32  s3, v1                           // 000000000030: 7E060501
  s_load_dword  s2, s[2:3], 0x00                        // 000000000034: C0010300
  v_mov_b32     v1, 0x000003e8                          // 000000000038: 7E0202FF 000003E8
  s_waitcnt     lgkmcnt(0)                              // 000000000040: BF8C007F
  v_mul_lo_u32  v1, s2, v1                              // 000000000044: D2D20001 00020202
  v_cmp_lt_i32  s[2:3], v1, 1                           // 00000000004C: D1020002 00010301
  s_mov_b64     s[4:5], exec                            // 000000000054: BE84047E
  s_andn2_b64   exec, s[4:5], s[2:3]                    // 000000000058: 8AFE0204
  s_cbranch_execz  label_004B                           // 00000000005C: BF880033
  s_load_dwordx2  s[2:3], s[6:7], 0x00                  // 000000000060: C0410700
  s_waitcnt     lgkmcnt(0)                              // 000000000064: BF8C007F
  v_add_i32     v0, s[6:7], v0, s2                      // 000000000068: D24A0600 00000500
  v_mov_b32     v1, s3                                  // 000000000070: 7E020203
  v_addc_u32    v1, vcc, 0, v1, s[6:7]                  // 000000000074: D2506A01 001A0280
  v_lshl_b64    v[0:1], v[0:1], 32                      // 00000000007C: D2C20000 00014100
  v_ashr_i64    v[0:1], v[0:1], 32                      // 000000000084: D2C60000 00014100
  v_lshl_b64    v[0:1], v[0:1], 2                       // 00000000008C: D2C20000 00010500
  v_add_i32     v0, s[2:3], s0, v0                      // 000000000094: D24A0200 00020000
  v_mov_b32     v2, s1                                  // 00000000009C: 7E040201
  v_addc_u32    v1, vcc, v2, v1, s[2:3]                 // 0000000000A0: D2506A01 000A0302
  v_mov_b32     v2, s0                                  // 0000000000A8: 7E040200
  v_mov_b32     v3, s1                                  // 0000000000AC: 7E060201
  flat_load_dword  v2, v[2:3]                           // 0000000000B0: DC300000 02000002
  s_movk_i32    s0, 0x03e8                              // 0000000000B8: B00003E8
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 0000000000BC: BF8C0070
  v_mul_lo_u32  v2, v2, s0                              // 0000000000C0: D2D20002 00000102
  s_mov_b64     s[0:1], exec                            // 0000000000C8: BE80047E
  v_mov_b32     v3, 0                                   // 0000000000CC: 7E060280
label_0034:
  v_lshl_b64    v[4:5], v[0:1], 32                      // 0000000000D0: D2C20004 00014100
  v_add_i32     v3, vcc, 1, v3                          // 0000000000D8: 4A060681
  v_cmp_lt_i32  s[2:3], v3, v2                          // 0000000000DC: D1020002 00020503
  s_and_b64     exec, exec, s[2:3]                      // 0000000000E4: 87FE027E
  s_cbranch_execz  label_003C                           // 0000000000E8: BF880001
  s_branch      label_0034                              // 0000000000EC: BF82FFF8
label_003C:
  s_mov_b64     exec, s[0:1]                            // 0000000000F0: BEFE0400
  flat_load_dword  v0, v[0:1]                           // 0000000000F4: DC300000 00000000
  s_waitcnt     vmcnt(0) & lgkmcnt(0)                   // 0000000000FC: BF8C0070
  flat_store_dword  v[4:5], v0                          // 000000000100: DC700000 00000004
  v_mov_b32     v0, 0                                   // 000000000108: 7E000280
  flat_store_dword  v[4:5], v0                          // 00000000010C: DC700000 00000004
  v_mov_b32     v0, 0                                   // 000000000114: 7E000280
  flat_store_dword  v[4:5], v0                          // 000000000118: DC700000 00000004
  v_mov_b32     v0, 0                                   // 000000000120: 7E000280
  flat_store_dword  v[4:5], v0                          // 000000000124: DC700000 00000004
label_004B:
  s_endpgm                                              // 00000000012C: BF810000
end

AMD HSA Code Object End
